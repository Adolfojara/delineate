#! /usr/bin/env python
# -*- coding: utf-8 -*-

###############################################################################
##
##  Copyright 2019 Jeet Sukumaran and Mark T. Holder.
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License along
##  with this program. If not, see <http://www.gnu.org/licenses/>.
##
###############################################################################

"""
Calculate probabilities of partitions of population tree leafsets into species
under a Protracted Birth Death (PBD) model, optimizing the speciation
completion rate parameter as required.
"""

# Imports {{{1
import sys
import os
import argparse
import subprocess
import math
import itertools
import collections
import json
from dendropy.dataio import nexusprocessing
from delineate import model
from delineate import estimate
from delineate import control
from delineate import utility
# }}}1

# Species Partition Estimation {{{1
def execute_species_partition_estimation(args):
    controller = control.get_controller(
            name="delineate-estimate",
            args=args)
    if args.speciation_completion_rate is not None:
        controller.speciation_completion_rate = args.speciation_completion_rate
    speciation_completion_rate = controller.speciation_completion_rate
    tree = controller.tree
    if controller.has_species_constraints:
        species_constraints = model._Partition.compile_lookup_key(controller.species_leafset_constraint_labels)
        tree.set_node_constraints(species_constraints)

    if speciation_completion_rate is None:
        if controller.has_species_constraints:
            induced_tree = tree.extract_tree_with_taxa_labels(
                    labels=controller.constrained_lineage_leaf_labels)
            mle = estimate.SpeciationCompletionRateMaximumLikelihoodEstimator(
                    tree=induced_tree,
                    species_leafset_labels=species_constraints,
                    initial_speciation_rate=controller.config_d.get("initial_speciation_rate", 0.01),
                    min_speciation_rate=controller.config_d.get("min_speciation_rate", 1e-8),
                    max_speciation_rate=controller.config_d.get("max_speciation_rate", 2.00))
            speciation_completion_rate_estimate, speciation_completion_rate_estimate_lnl = mle.estimate_speciation_rate()
            speciation_completion_rate = speciation_completion_rate_estimate
            speciation_completion_rate_source = "estimated"
    else:
        speciation_completion_rate_source = "specified"
        speciation_completion_rate_estimate_lnl = 0.0
    if speciation_completion_rate is None:
        controller.logger.error("ERROR: Speciation completion rate must be specified either in configuration file or by command argument '--speciation-completion-rate'")
        controller.logger.critical("Terminating due to error")
        sys.exit(1)
    tree.speciation_completion_rate = speciation_completion_rate

    partition_probability_map = tree.calc_label_partition_probability_map()

    result_dict = collections.OrderedDict()
    row = []
    if args.tree_info:
        result_dict["num_tips"] = len(tree.taxon_namespace)
        tree.calc_node_ages()
        result_dict["root_age"] = "{}".format(tree.seed_node.age)
    extra_fields = utility.parse_fieldname_and_value(args.label)
    if extra_fields:
        result_dict.update(extra_fields)
    result_dict["speciation_completion_rate"] = speciation_completion_rate
    result_dict["speciation_completion_rate_source"] = speciation_completion_rate_source
    result_dict["speciation_completion_rate_estimate_lnl"] = speciation_completion_rate_estimate_lnl
    species_partition_info = []
    probability_index = 2
    for k in partition_probability_map:
        kentry = (
                k,
                list(list(s) for s in k),
                partition_probability_map[k],
                )
        species_partition_info.append(kentry)
    # species_partition_info = [(
    #         k,
    #         list(list(s) for s in k),
    #         partition_probability_map[k],
    #         math.log(partition_probability_map[k])) for k in partition_probability_map]
    species_partition_info.sort(key=lambda x: x[probability_index], reverse=True)
    assert species_partition_info[0][probability_index] >= species_partition_info[-1][probability_index], \
            sys.stderr.write("{} >= {}: False\n".format(species_partition_info[0][probability_index], species_partition_info[-1][probability_index]))
    result_dict["num_partitions"] = len(species_partition_info)
    # max_log_likelihood = species_partition_info[0][log_likelihood_index]
    # result_dict["max_log_likelihood"] = max_log_likelihood
    result_dict["num_partitions_in_confidence_interval"] = 0
    result_dict["report_mle_only"] = args.report_mle_only
    result_dict["report_constrained_probability_threshold"] = args.report_constrained_probability_threshold
    result_dict["report_constrained_cumulative_probability_threshold"] = args.report_constrained_cumulative_probability_threshold
    result_dict["partitions"] = []
    cumulative_probability = tree.as_working_value_type(0.0)
    cumulative_probability_given_constr = tree.as_working_value_type(0.0)
    num_partitions_in_confidence_interval = 0
    cond_prob = sum([i[probability_index] for i in species_partition_info])
    if cond_prob == 0:
        raise ValueError("0 conditional probability")
    try:
        ln_cond_prob = math.log(cond_prob)
    except ValueError:
        ln_cond_prob = float("nan")

    treefile_path, treefile = open_output_file(
            args=args,
            suffix=".delimitation-results",
            extension="trees",)
    leaf_nodes = [nd for nd in tree.leaf_node_iter()]
    with treefile:
        tree.taxon_namespace.write(file=treefile, schema="nexus")
        treefile.write("BEGIN TREES;\n")
        taxon_token_map = {}
        translate_statement = []
        for taxon_idx, taxon in enumerate(tree.taxon_namespace):
            taxon_token_map[taxon] = str(taxon_idx + 1)
            label = nexusprocessing.escape_nexus_token(str(taxon.label),
                    preserve_spaces=True,
                    quote_underscores=True,
                    )
            translate_statement.append("             {} {}".format(taxon_token_map[taxon], label))
        treefile.write("        Translate\n")
        treefile.write("{}\n             ;\n".format(",\n".join(translate_statement)))
        for key_idx, (key, key_as_list, prob) in enumerate(species_partition_info):
            if args.report_mle_only and key_idx > 0:
                break
            p = collections.OrderedDict()
            p["species_leafsets"] = key_as_list
            p["constrained_probability"] = None
            p["constrained_cumulative_probability"] = None
            p["is_in_confidence_interval"] = None
            p["unconstrained_probability"] = None
            p["unconstrained_cumulative_probability"] = None
            # try:
            #     p["log_probability"] = math.log(prob)
            # except ValueError:
            #     p["log_probability"] = float("nan")
            p["unconstrained_probability"] = tree.as_float(prob)
            bpc = prob / cond_prob
            p["constrained_probability"] = tree.as_float(bpc)
            if args.report_constrained_probability_threshold is not None and p["constrained_probability"] < args.report_constrained_probability_threshold:
                break
            # if args.report_unconstrained_probability_threshold is not None and p["unconstrained_probability"] < args.report_unconstrained_probability_threshold:
            #     break
            # p["log_probability_given_constraints"] = tree.as_float(lnL - ln_cond_prob)

            # need to check this before summing cumulative probability, otherwise
            # any single partition with probability > 0.95 will incorrectly be
            # flagged as being outside the confidence interval.
            if cumulative_probability_given_constr <= 0.95 and bpc > 0.0:
                p["is_in_confidence_interval"] = True
                num_partitions_in_confidence_interval += 1
            else:
                p["is_in_confidence_interval"] = False
            if args.report_constrained_cumulative_probability_threshold is not None and cumulative_probability_given_constr > args.report_constrained_cumulative_probability_threshold:
                break

            cumulative_probability += prob
            cumulative_probability_given_constr += bpc
            p["unconstrained_cumulative_probability"] = tree.as_float(cumulative_probability)
            p["constrained_cumulative_probability"] = tree.as_float(cumulative_probability_given_constr)

            result_dict["partitions"].append(p)

            lineage_species_name_map = controller.compile_postanalysis_lineage_species_name_map(postanalysis_species_leafset_labels=key_as_list)
            for key in (
                    "constrained_probability",
                    "constrained_cumulative_probability",
                    "unconstrained_probability",
                    "unconstrained_cumulative_probability",
                    "is_in_confidence_interval",
                    ):
                tree.annotations[key] = p[key]
            for nd in leaf_nodes:
                nd.annotations["species"] = lineage_species_name_map[nd.taxon.label]
                if nd.taxon.label in controller.registry.preanalysis_constrained_lineage_species_map:
                    nd.annotations["status"] = "constrained"
                else:
                    nd.annotations["status"] = "inferred"
            treefile.write("    Tree {} = {}".format(
                key_idx + 1,
                tree.as_string(
                    schema="newick",
                    suppress_annotations=False,
                    taxon_token_map=taxon_token_map,
                    )))
            # print("--")
            # print(lineage_species_name_map)
        treefile.write("END TREES;\n")

    result_dict["num_partitions_in_confidence_interval"] = num_partitions_in_confidence_interval
    if True: # args.write_json
        out_path, outf = open_output_file(
                args=args,
                suffix=".delimitation-results",
                extension="json")
        with outf:
            if False: #args.output_format == "json-compact":
                json.dump(result_dict, outf)
            else:
                json.dump(result_dict, outf, indent=4, separators=(',', ': '))
            controller.logger.info("JSON-formatted results written to: '{}'".format(out_path))
    controller.logger.info("Operation complete")
    controller.logger.info("Terminating normally")
# }}}1

# Speciation Completion Rate Parameter Estimation {{{1
def execute_speciation_completion_rate_estimation(args):
    controller = control.get_controller(
            name="delineate-estimate",
            args=args)
    tree = controller.tree
    if not controller.has_species_constraints:
        sys.exit("Neither 'species_leafsets' nor '{}' specified in configuration".format(utility.SPECIES_LEAFSET_CONSTRAINTS_KEY))
    # species_constraints = model._Partition.compile_lookup_key(controller.species_leafset_constraint_labels)
    species_leafset_labels = model._Partition.compile_lookup_key(controller.species_leafset_constraint_labels)
    initial_speciation_rate = controller.config_d.pop("initial_speciation_rate", 0.01)
    min_speciation_rate = controller.config_d.pop("min_speciation_rate", 1e-8)
    max_speciation_rate = controller.config_d.pop("max_speciation_rate", 2.00)
    mle = estimate.SpeciationCompletionRateMaximumLikelihoodEstimator(
            tree=tree,
            species_leafset_labels=species_leafset_labels,
            initial_speciation_rate=initial_speciation_rate,
            min_speciation_rate=min_speciation_rate,
            max_speciation_rate=max_speciation_rate)
    speciation_completion_rate_estimate, speciation_completion_rate_estimate_lnl = mle.estimate_speciation_rate()
    extra_fields = utility.parse_fieldname_and_value(args.label)
    out_path, out = open_output_file(
            args=args,
            suffix=".rate-results",
            extension="tsv")
    with out:
        output_field_separator = args.output_field_separator
        if not args.no_header_row:
            header_row = []
            if args.tree_info:
                header_row.append("num_tips")
                header_row.append("root_age")
            header_row.extend(extra_fields)
            header_row.append("speciation_completion_rate")
            header_row.append("speciation_completion_rate_estimate_lnl")
            if args.intervals:
                header_row.append("ci_low")
                header_row.append("ci_high")
            out.write(output_field_separator.join(header_row))
            out.write("\n")
        row = []
        if args.tree_info:
            row.append("{}".format(len(tree.taxon_namespace)))
            tree.calc_node_ages()
            row.append("{}".format(tree.seed_node.age))
        for field in extra_fields:
            row.append(extra_fields[field])
        row.append("{}".format(speciation_completion_rate_estimate))
        row.append("{}".format(speciation_completion_rate_estimate_lnl))
        if args.intervals:
            ci_low, ci_high = mle.estimate_confidence_interval(
                mle_speciation_rate=speciation_completion_rate_estimate,
                max_lnl=speciation_completion_rate_estimate_lnl)
            row.append("{}".format(ci_low))
            row.append("{}".format(ci_high))
        out.write(output_field_separator.join(row))
        out.write("\n")
        controller.logger.info("Results written to: '{}'".format(out_path))
    controller.logger.info("Operation complete")
    controller.logger.info("Terminating normally")
# }}}1

# CLI Support{{{1
def add_source_options(parser, source_options=None):
    if not source_options:
        source_options = parser.add_argument_group("Source Options")
    source_options.add_argument("-t", "--tree-file",
            required=True,
            help="Path to tree file.")
    source_options.add_argument("-c", "--config-file",
            help="Path to configuration file.")
    source_options.add_argument("-f", "--tree-format",
            dest="tree_format",
            type=str,
            default="nexus",
            choices=["nexus", "newick"],
            help="Tree file data format (default='%(default)s').")
    parser._source_options = source_options
    return parser

def add_output_options(parser, output_options=None):
    if not output_options:
        output_options = parser.add_argument_group("Output Options")
    output_options.add_argument("-o", "--output-prefix",
            default=None,
            help="Prefix for output file(s).")
    output_options.add_argument("-l", "--label",
            action="append",
            help="Label to append to output (in format <FIELD-NAME>:value;)")
    output_options.add_argument( "--no-header-row",
            action="store_true",
            default=False,
            help="Do not write a header row.")
    output_options.add_argument( "--append",
            action="store_true",
            default=False,
            help="Append to output file if it already exists instead of overwriting.")
    output_options.add_argument( "--field-separator",
            default="\t",
            dest="output_field_separator",
            help="Field separator or delimiter character [default: tab].")
    parser._output_options = output_options
    return parser

def open_output_file(args,
        suffix,
        extension,
        ):
    if args.output_prefix == "-":
        return "<STDOUT>", sys.stdout
    else:
        if args.output_prefix is None:
            args.output_prefix = utility.compose_output_prefix(
                    input_filepath=args.config_file,
                    default="delineate",
                    )
        if suffix is None:
            suffix = ""
        outpath = "{}{}.{}".format(
                os.path.expanduser(os.path.expandvars(args.output_prefix)),
                suffix,
                extension)
        return outpath, open(outpath, "w")
# }}}1

# Main CLI {{{1

def main():
    main_parser = argparse.ArgumentParser(description=__doc__)
    try:
        main_parser._optionals.title = "Program Options"
    except AttributeError:
        pass
    cmd_parser = main_parser.add_subparsers(title="Commands", dest="command")

    command_cli = collections.OrderedDict()
    command_cli["partitions"] = {
        "parents": [],
        "desc":
                "Given a known population tree and optionally a speciation"
                " completion rate, calculate the probability of different"
                " partitions of population lineages into species, with the"
                " partition of the highest probability corresponding to the"
                " maximum likelihood species delimitation estimate.",
        "func": execute_species_partition_estimation}
    command_cli["rates"] = {
        "parents": [],
        "desc":
                "Given a known population tree and known species partition,"
                " estimate the speciation completion rate",
        "func": execute_speciation_completion_rate_estimation}
    command_parsers = collections.OrderedDict()
    for key in command_cli:
        kwargs = {}
        if command_cli[key]["parents"]:
            kwargs["parents"] = command_cli[key]["parents"]
        kwargs["help"] = command_cli[key]["desc"]
        kwargs["description"] = kwargs["help"]
        cmd_options_parser = cmd_parser.add_parser(
            key,
            **kwargs)
        cmd_options_parser.set_defaults(func=command_cli[key]["func"])
        try:
            cmd_options_parser._optionals.title = "Command Options"
            cmd_options_parser._positionals.title = "Command Targets"
        except AttributeError:
            pass
        add_source_options(cmd_options_parser)
        add_output_options(cmd_options_parser)
        command_parsers[key] = cmd_options_parser

    ## setup partition options
    c1_parser = command_parsers["partitions"]
    estimation_options = c1_parser.add_argument_group("Estimation Options")
    estimation_options.add_argument("-u", "--underflow-protection",
            action="store_true",
            default=False,
            help="Try to protect against underflow by using special number handling classes (slow).",)
    model_options = c1_parser.add_argument_group("Model Options")
    model_options.add_argument("-s", "--speciation-completion-rate",
            type=float,
            default=None,
            help="The speciation completion rate (overrides that given in configuration file, if any; default: None).",)
    output_options = c1_parser._output_options
    output_options.add_argument("-p", "--report-probability-threshold",
            dest="report_constrained_probability_threshold",
            default=None,
            type=float,
            help="Do not report on partitions with constrained (conditional) probability below this threshold.")
    output_options.add_argument("-P", "--report-cumulative-probability-threshold",
            dest="report_constrained_cumulative_probability_threshold",
            default=None,
            type=float,
            help="Do not report on partitions outside of this constrained (conditional) cumulative probability below this threshold.")
    # output_options.add_argument("-q", "--report-unconstrained-probability-threshold",
    #         dest="report_unconstrained_probability_threshold",
    #         default=None,
    #         type=float,
    #         help="Do not report on partitions with unconstrained probability below this threshold.")
    # output_options.add_argument("-Q", "--report-unconstrained-cumulative-probability-threshold",
    #         dest="report_unconstrained_cumulative_probability_threshold",
    #         default=None,
    #         type=float,
    #         help="Do not report on partitions outside of this cumulative probability below this threshold.")
    output_options.add_argument("--report-mle-only",
            dest="report_mle_only",
            action="store_true",
            default=False,
            help="Only report maximum likelihood estimate.",)
    output_options.add_argument("-I", "--tree-info",
            action="store_true",
            help="Output additional information about the tree.",)
    # output_options.add_argument("--output-format",
    #         default="json-compact",
    #         choices=["json", "json-compact"],
    #         help="Format for output file.",)

    ## setup rate estimation options
    c2_parser = command_parsers["rates"]
    estimation_options = c2_parser.add_argument_group("Estimation options")
    estimation_options.add_argument("-i", "--intervals", "--confidence-intervals",
            action="store_true",
            help="Calculate confidence intervals.",)
    estimation_options.add_argument("-u", "--underflow-protection",
            action="store_true",
            default=False,
            help="Try to protect against underflow by using special number handling classes (slow).",)
    output_options = c2_parser._output_options
    output_options.add_argument("-I", "--tree-info",
            action="store_true",
            help="Output additional information about the tree",)


    if len(sys.argv) == 1:
        msg = []
        msg.append("Please specify one of the following operations:")
        msg.append("")
        msg.append("    delineate-estimate partitions")
        msg.append("    delineate-estimate rates")
        msg.append("")
        msg.append("Or type '--help' for help:")
        msg.append("")
        msg.append("    delineate-estimate --help")
        msg.append("    delineate-estimate partitions --help")
        msg.append("    delineate-estimate rates --help")
        msg.append("")
        msg = "\n".join(msg)
        sys.exit(msg)

    args = main_parser.parse_args()
    # controller.is_quiet = getattr(args, "quiet", True)

    if hasattr(args, 'func'):
        args.func(args=args)
    else:
        pass
        # args.status_targets = "short"
        # execute_status_command(controller=controller, args=args)
    sys.exit(0)

if __name__ == '__main__':
    main()

# }}}1
